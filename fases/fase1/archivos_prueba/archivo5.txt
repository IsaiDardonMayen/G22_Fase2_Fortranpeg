start
  = proGram
  ;

proGram
  = statement *

statement
  = assignment
  / expression_statement
  / if_statement
  / while_statement
  / function_definition
  / return_statement
  / for_statement
  / list_definition
  ;

assignment
  = variable "=" expression
  ;

expression_statement
  = expression
  ;

if_statement
  = "if" "(" expression ")" block ("else" block)?
  ;

while_statement
  = "while" "(" expression ")" block
  ;

for_statement
  = "for" "(" variable "in" range ")" block
  ;

function_definition
  = "function" variable "(" PARAMETERS? ")" block
  ;

return_statement
  = "return" expression
  ;

list_definition
  = variable "=" "[" expression_list "]"
  ;

PARAMETERS
  = parameter ("," parameter)*
  ;

parameter
  = variable
  ;

print_statement
  = "print" "(" expression ")"
  ;

expression
  = additive
  / string_literal
  / variable
  / integer
  / function_call
  / list_access
  ;

additive
  = multiplicative ("+" multiplicative)*
  / multiplicative ("-" multiplicative)*
  ;

multiplicative
  = primary ("*" primary)*
  / primary ("/" primary)*
  ;

primary
  = integer
  / string_literal
  / variable
  / function_call
  / list_access
  / "(" expression ")"
  ;

function_call
  = variable "(" arguments? ")"
  ;

arguments
  = expression ("," expression)*
  ;

list_access
  = variable "[" expression "]"
  ;

string_literal
  = "\"" [a-zA-Z0-9 ]+ "\""
  ;

variable
  = [a-zA-Z_][a-zA-Z0-9_]*
  ;

integer
  = [0-9]+
  ;

block
  = "{" statement* "}"
  ;

range
  = integer ".." integer
  ;

expression_list
  = expression ("," expression)*
  ;
